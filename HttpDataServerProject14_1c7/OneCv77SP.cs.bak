using Nskd;
using Nskd.V77;
using System;
using System.Data;
using System.Text.RegularExpressions;

namespace HttpDataServerProject14
{
    public class OcStoredProcedure
    {
        private static String V77GarzaCnString = @"/d""\\SRV-TS2\dbase_1c$\ФК_Гарза"" /n""Соколов_Евгений_клиент_1"" /p""yNFxfrvqxP""";
        private static GlobalContext V77gc;

        private static Object thisLock = new Object();

        public static ResponsePackage Exec1(RequestPackage rqp)
        {
            ResponsePackage rsp = new ResponsePackage();
            Int32 code = -1;
            lock (thisLock)
            {
                if (V77gc == null) { V77gc = new GlobalContext(V77GarzaCnString); }
                if(V77gc != null && V77gc.ComObject != null)
                {
                    DataTable dt = null;
                    switch (rqp.Command)
                    {
                        case "Добавить":
                            code = Agrs.F0Add(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(new DataTable());
                            rsp.Data.Tables[0].Columns.Add("code", typeof(Int32));
                            rsp.Data.Tables[0].Rows.Add(rsp.Data.Tables[0].NewRow());
                            rsp.Data.Tables[0].Rows[0][0] = code;
                            break;
                        case "Обновить":
                            code = Agrs.F0Update(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(new DataTable());
                            rsp.Data.Tables[0].Columns.Add("code", typeof(Int32));
                            rsp.Data.Tables[0].Rows.Add(rsp.Data.Tables[0].NewRow());
                            rsp.Data.Tables[0].Rows[0][0] = code;
                            break;
                        case "Удалить":
                            code = Agrs.F0Delete(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(new DataTable());
                            rsp.Data.Tables[0].Columns.Add("code", typeof(Int32));
                            rsp.Data.Tables[0].Rows.Add(rsp.Data.Tables[0].NewRow());
                            rsp.Data.Tables[0].Rows[0][0] = code;
                            break;
                        case "Docs1c/F0/Save":
                            Docs1c.Save(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(new DataTable());
                            rsp.Data.Tables[0].Columns.Add("code", typeof(Int32));
                            rsp.Data.Tables[0].Rows.Add(rsp.Data.Tables[0].NewRow());
                            rsp.Data.Tables[0].Rows[0][0] = code;
                            break;
                        case "[dbo].[oc_клиенты_select_1]":
                            dt = F1GetCustTable(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(dt);
                            break;
                        case "[dbo].[oc_сотрудники_select_1]":
                            dt = F1GetStuffTable(rqp);
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(dt);
                            break;
                        case "ПолучитьСписокПриходныхНакладных":
                            dt = ПолучитьСписокПриходныхНакладных();
                            rsp.Data = new DataSet();
                            rsp.Data.Tables.Add(dt);
                            break;
                        default:
                            break;
                    }
                }
            }
            return rsp;
        }
        public class Agrs
        {
            public static Int32 F0Add(RequestPackage rqp)
            {
                Int32 code = -1;
                // Договора нет. Надо создать новую запись.
                // Вставка нового элемента в справочник Договоры.
                // сначала ищем Клиента так как Договоры - подчинённый справочник 
                /*
                try
                {
                    Console.WriteLine((rqp["ВладелецКод"] as String) + ": " + (rqp["Владелец"] as String));
                    GetByCode(root, "Клиенты", rqp["ВладелецКод"] as String);
                }
                catch (Exception e) { Console.WriteLine(e.ToString()); }
                */
                //V77Object cust = GetByDescr(root, "Клиенты", rqp["Владелец"] as String);
                var cust = GetByCode("Клиенты", rqp["ВладелецКод"] as String);
                if (cust != null)
                {
                    // Клиента нашли. Открываем справочник Договоры
                    var Договора = new Справочник(V77gc.СоздатьОбъект("Справочник.Договора"));
                    // в нём работаем только с записями по Клиенту
                    Договора.ИспользоватьВладельца(cust);

                    // Ищем папку с нужным годом
                    String year = DateTime.Now.Year.ToString();
                    String dd = OcConvert.ToD(rqp["ДатаДоговора"] as String);
                    if (dd.Length == 10)
                    {
                        year = dd.Substring(6, 4);
                    }
                    // 1 - поиск внутри установленного подчинения.
                    if (Договора.НайтиПоНаименованию(year, 1) == 0)
                    {
                        // Папку с нужным годом не нашли. Создаём новую.
                        Договора.НоваяГруппа();
                        Договора.Наименование = year;
                        Договора.Записать();
                    }

                    // Папка или найдена или только что создана. Берём её как родителя.
                    var parent = Договора.ТекущийЭлемент();
                    Договора.ИспользоватьРодителя(parent);

                    // Создаём новый элемент справочника Договоры
                    Договора.Новый();

                    // Изменяем содержимое полей.
                    var empl = GetByDescr("Сотрудники", rqp["ОтветЛицо"] as String);
                    var pres = GetByDescr("Клиенты", rqp["Представитель"] as String);
                    var adda = GetByDescr("Договора", rqp["ДопСоглашение"] as String);

                    Договора.УстановитьАтрибут("Владелец", cust);
                    Договора.УстановитьАтрибут("Наименование", rqp["Наименование"] as String);
                    Договора.УстановитьАтрибут("ДатаДоговора", OcConvert.ToD(rqp["ДатаДоговора"] as String));
                    Договора.УстановитьАтрибут("ДатаОкончания", OcConvert.ToD(rqp["ДатаОкончания"] as String));
                    Договора.УстановитьАтрибут("Пролонгация", rqp["Пролонгация"] as String);
                    Договора.УстановитьАтрибут("ОтветЛицо", ((empl == null) ? null : empl));
                    Договора.УстановитьАтрибут("СуммаДоговора", OcConvert.ToN(rqp["СуммаДоговора"] as String));
                    Договора.УстановитьАтрибут("ОтсрочкаПлатежа", OcConvert.ToN(rqp["ОтсрочкаПлатежа"] as String));
                    Договора.УстановитьАтрибут("Представитель", ((pres == null) ? null : pres));
                    Договора.УстановитьАтрибут("ДопСоглашение", ((adda == null) ? null : adda));
                    Договора.УстановитьАтрибут("Примечание", rqp["Примечание"] as String);
                    Договора.УстановитьАтрибут("НомерТоргов", rqp["НомерТоргов"] as String);
                    Договора.УстановитьАтрибут("ГосударственныйИдентификатор", rqp["ГосударственныйИдентификатор"] as String);
                    Договора.УстановитьАтрибут("НовыйДоговор", 1);

                    // Сохранить.
                    Договора.Записать();

                    code = Int32.Parse(Договора.Код);
                }
                else
                {
                    Log.Write("В 1С.Сравочник.Клиенты не наден элемент: " + (rqp["Владелец"] as String));
                }
                return code;
            }
            public static Int32 F0Update(RequestPackage rqp)
            {
                Int32 code = -1;
                if (Int32.TryParse(rqp["Код"] as String, out code))
                {
                    // Пробуем найти Договор.
                    var Договора = new Справочник(V77gc.СоздатьОбъект("Справочник.Договора"));
                    if (Договора.НайтиПоКоду(code.ToString()) == 1)
                    {
                        if (Договора.Выбран() == 1) // Договор найден.
                        {
                            var empl = GetByDescr("Сотрудники", rqp["ОтветЛицо"] as String);
                            var pres = GetByDescr("Клиенты", rqp["Представитель"] as String);
                            var adda = GetByDescr("Договора", rqp["ДопСоглашение"] as String);

                            Договора.УстановитьАтрибут("Наименование", rqp["Наименование"] as String);
                            Договора.УстановитьАтрибут("ДатаДоговора", OcConvert.ToD(rqp["ДатаДоговора"] as String));
                            Договора.УстановитьАтрибут("ДатаОкончания", OcConvert.ToD(rqp["ДатаОкончания"] as String));
                            Договора.УстановитьАтрибут("Пролонгация", rqp["Пролонгация"] as String);
                            Договора.УстановитьАтрибут("ОтветЛицо", ((empl == null) ? null : empl));
                            Договора.УстановитьАтрибут("СуммаДоговора", OcConvert.ToN(rqp["СуммаДоговора"] as String));
                            Договора.УстановитьАтрибут("ОтсрочкаПлатежа", OcConvert.ToN(rqp["ОтсрочкаПлатежа"] as String));
                            Договора.УстановитьАтрибут("Представитель", ((pres == null) ? null : pres));
                            Договора.УстановитьАтрибут("ДопСоглашение", ((adda == null) ? null : adda));
                            Договора.УстановитьАтрибут("Примечание", rqp["Примечание"] as String);
                            Договора.УстановитьАтрибут("НомерТоргов", rqp["НомерТоргов"] as String);
                            Договора.УстановитьАтрибут("ГосударственныйИдентификатор", rqp["ГосударственныйИдентификатор"] as String);

                            Договора.Записать();

                            code = Int32.Parse(Договора.Код);
                        }
                    }
                }
                else
                {
                    Log.Write("Ошибка: не правильный код для 1С.Справочник.Договора: " + String.Format("{0:s}", rqp["Код"] as String));
                }
                return code;
            }
            public static Int32 F0Delete(RequestPackage rqp)
            {
                Int32 code = -1;
                if (Int32.TryParse(rqp["Код"] as String, out code))
                {
                    var Договора = new Справочник(V77gc.СоздатьОбъект("Справочник.Договора"));
                    if (Договора.НайтиПоКоду(code.ToString()) == 1)
                    {
                        Договора.Удалить(0); // 0 - пометка на удаление
                    }
                }
                else
                {
                    Log.Write("Ошибка: не правильный код для 1С.Справочник.Договора: " + String.Format("{0:s}", rqp["Код"] as String));
                }
                return code;
            }
        }
        public class Docs1c
        {
            public static void Save(RequestPackage rqp)
            {
                String docDate = null;
                String docNo = null;
                String track = null;
                String sDate = null;
                String rDate = null;
                if ((rqp != null) && (rqp.Parameters != null))
                {
                    foreach (var p in rqp.Parameters)
                    {
                        if (p != null)
                        {
                            if (p.Name == "f1") { docDate = p.Value as String; }
                            if (p.Name == "f2") { docNo = p.Value as String; }
                            if (p.Name == "f4") { track = p.Value as String; }
                            if (p.Name == "f5") { sDate = p.Value as String; }
                            if (p.Name == "f6") { rDate = p.Value as String; }
                        }
                    }
                }
                Log.Write(String.Format("'{0}', '{1}', '{2}', '{3}', '{4}'", docDate, docNo, track, sDate, rDate));
                // Пробуем найти Расходную.
                var Расходная = new Документ(V77gc.СоздатьОбъект("Документ.Расходная"));
                if (Расходная.НайтиПоНомеру(docNo, Convert.ToDateTime(docDate)) == 1)
                {
                    // Расходная найдена.
                    Console.WriteLine("Расходная найдена.");
                    // Справочник Рыссылки
                    var Рассылки = new Справочник(V77gc.СоздатьОбъект("Справочник.Рассылки"));
                    if (Рассылки.НайтиПоРеквизиту("РасходнаяНакладная", Расходная, 1) == 0)
                    {
                        // Рассылка не найдена.
                        Console.WriteLine("Рассылка не найдена.");
                        Рассылки.Новый();
                        var rncd = Расходная.ТекущийДокумент();
                        Рассылки.УстановитьАтрибут("РасходнаяНакладная", rncd);
                    }
                    // Рассылка найдена или только-что создана.
                    Console.WriteLine("Рассылка найдена или только-что создана.");
                    Рассылки.УстановитьАтрибут("Наименование", track);
                    DateTime d;
                    if ((!String.IsNullOrWhiteSpace(sDate)) && (DateTime.TryParse(sDate, out d)))
                    {
                        Рассылки.УстановитьАтрибут("ДатаОтправкиДокументов", d);
                    }
                    else
                    {
                        Рассылки.УстановитьАтрибут("ДатаОтправкиДокументов", null);
                    }
                    if ((!String.IsNullOrWhiteSpace(rDate)) && (DateTime.TryParse(rDate, out d)))
                    {
                        Рассылки.УстановитьАтрибут("ДатаПолученияДокументов", d);
                    }
                    else
                    {
                        Рассылки.УстановитьАтрибут("ДатаПолученияДокументов", null);
                    }
                    Рассылки.Записать();
                }
            }
        }
        private static Справочник GetByCode(String name, String code)
        {
            Справочник obj = null;
            if (!String.IsNullOrWhiteSpace(name))
            {
                var справочник = new Справочник(V77gc.СоздатьОбъект("Справочник." + name));
                // режим 0 - поиск во всём справочнике
                if (справочник.НайтиПоКоду(code, 0) == 1)
                {
                    obj = справочник.ТекущийЭлемент();
                }
                справочник.Dispose(); справочник = null;
            }
            return obj;
        }
        private static Справочник GetByDescr(String name, String descr)
        {
            Справочник obj = null;
            if (!String.IsNullOrWhiteSpace(name))
            {
                var справочник = new Справочник(V77gc.СоздатьОбъект("Справочник." + name));
                // режим 0 - поиск во всём справочнике
                if (справочник.НайтиПоНаименованию(descr, 0) == 1)
                {
                    obj = справочник.ТекущийЭлемент();
                }
                справочник.Dispose(); справочник = null;
            }
            return obj;
        }

        private static DataTable F1GetCustTable(RequestPackage rqp)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Код", typeof(String));
            dt.Columns.Add("Наименование", typeof(String));
            dt.Columns.Add("ИНН", typeof(String));
            dt.Columns.Add("Город", typeof(String));
            var filter = rqp["DESCR"] as String;
            if (!String.IsNullOrWhiteSpace(filter))
            {
                Regex re = new Regex(filter, RegexOptions.IgnoreCase);
                try
                {
                    var Клиенты = new Справочник(V77gc.СоздатьОбъект("Справочник.Клиенты"));
                    try
                    {
                        if (Клиенты.ВыбратьЭлементы() == 1)
                        {
                            Int32 cnt = 0;
                            while (Клиенты.ПолучитьЭлемент() == 1 && cnt++ < 10000)
                            {
                                var Наименование = Клиенты.Наименование.Trim();
                                var ИНН = ((String)Клиенты.ПолучитьАтрибут("ИНН")).Trim();
                                if (re.IsMatch(Наименование) || re.IsMatch(ИНН))
                                {
                                    DataRow dr = dt.NewRow();
                                    dt.Rows.Add(dr);
                                    dr["Код"] = Клиенты.Код.Trim();
                                    dr["Наименование"] = Наименование;
                                    dr["ИНН"] = ((String)Клиенты.GetProperty("ИНН")).Trim();
                                    dr["Город"] = ((String)Клиенты.GetProperty("Город")).Trim();
                                }
                            }
                        }
                    }
                    catch (Exception) { }
                    finally { if (Клиенты != null) { Клиенты.Dispose(); Клиенты = null; } }
                }
                catch (Exception) { }
                //finally { if (V77Garza != null) { V77Garza.Dispose(); V77Garza = null; } }
            }
            return dt;
        }

        private static DataTable F1GetStuffTable(RequestPackage rqp)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Код", typeof(String));
            dt.Columns.Add("Наименование", typeof(String));
            var filter = rqp["DESCR"] as String;
            if (!String.IsNullOrWhiteSpace(filter))
            {
                Regex re = new Regex(filter, RegexOptions.IgnoreCase);
                try
                {
                    var Сотрудники = new Справочник(V77gc.СоздатьОбъект("Справочник.Сотрудники"));
                    try
                    {
                        if (Сотрудники.ВыбратьЭлементы() == 1)
                        {
                            Int32 cnt = 0;
                            while (Сотрудники.ПолучитьЭлемент() == 1 && cnt++ < 10000)
                            {
                                var Наименование = Сотрудники.Наименование.Trim();
                                if (re.IsMatch(Наименование))
                                {
                                    DataRow dr = dt.NewRow();
                                    dt.Rows.Add(dr);
                                    dr["Код"] = Сотрудники.Код.Trim();
                                    dr["Наименование"] = Наименование;
                                }
                            }
                        }
                    }
                    catch (Exception) { }
                    finally { if (Сотрудники != null) { Сотрудники.Dispose(); Сотрудники = null; } }
                }
                catch (Exception) { }
                //finally { if (V77Garza != null) { V77Garza.Dispose(); V77Garza = null; } }
            }
            return dt;
        }

        private static DataTable ПолучитьСписокПриходныхНакладных()
        {
            DataTable dt = new DataTable("СписокПриходныхНакладных");
            dt.Columns.Add("ДатаДок", typeof(DateTime));
            dt.Columns.Add("НомерДок", typeof(String));
            dt.Columns.Add("КлиентНаименование", typeof(String));
            try
            {
                var ТекстЗапроса = String.Format(@"
                    Без итогов;
                    Период с '{0}';
                    НомерДок = Документ.Приходная.НомерДок;
                    ДатаДок = Документ.Приходная.ДатаДок;
                    КлиентНаименование = Документ.Приходная.Клиент.Наименование;
                    Группировка НомерДок Без групп;
                    Условие(Найти(КлиентНаименование, ""{1}"") > 0);
                ", "01.05.2018", "Фарм-Сиб");
                if (V77gc.Запрос.Выполнить(ТекстЗапроса) == 1)
                {
                    Console.WriteLine("Запрос выполнен.");
                    while (V77gc.Запрос.Группировка() == 1)
                    {
                        DataRow dr = dt.NewRow();
                        dt.Rows.Add(dr);
                        dr["ДатаДок"] = V77gc.Запрос.ПолучитьАтрибут("ДатаДок");
                        dr["НомерДок"] = ((String)V77gc.Запрос.ПолучитьАтрибут("НомерДок")).Trim();
                        dr["КлиентНаименование"] = ((String)V77gc.Запрос.ПолучитьАтрибут("КлиентНаименование")).Trim();
                    }
                }
            }
            catch (Exception e) { Console.WriteLine(e); }
            return dt;
        }
    }
}
